/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ScriptPanel.java
 *
 * Created on Feb 25, 2010, 4:09:12 PM
 */
package com.ben.IA.brain.scripter.view;

import java.awt.Color;
import java.awt.FontMetrics;
import java.awt.event.KeyEvent;
import java.awt.print.PrinterException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ActionMap;
import javax.swing.JTextPane;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultEditorKit;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import javax.swing.text.StyledDocument;
import javax.swing.text.TabSet;
import javax.swing.text.TabStop;

/**
 *
 * @author benoitdaccache
 */
public class ScriptPanel extends javax.swing.JPanel {
    private boolean highlight = false;
    private SyntaxHighliter2 highlightThread = null;
    private StyledDocument styledDocument;

    /** Creates new form ScriptPanel */
    public ScriptPanel() {
        initComponents();
        ActionMap am = scriptTextPane.getActionMap();
        am.put(DefaultEditorKit.insertBreakAction, new IndentBreakAction());
        setTabs(scriptTextPane, 2);

    }

    public void startHighlight(){
        highlightThread = new SyntaxHighliter2(scriptTextPane);
        highlightThread.start();
        highlight = true;
    }

    public void print(){
        try {
            scriptTextPane.print();
        } catch (PrinterException ex) {
            Logger.getLogger(ScriptPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void stopHighlighter(){
        try {
            highlightThread.interrupt();
            highlight = false;
            String s = scriptTextPane.getText();
            styledDocument = scriptTextPane.getStyledDocument();
            styledDocument.remove(0, s.length());
            styledDocument.insertString(0, s.trim(), getStyle(false, false, 12, Color.BLACK));
        } catch (BadLocationException ex) {
            Logger.getLogger(ScriptPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }

    public boolean isHighlighting(){
        return highlight;
    }

    private static String getNameStyle(boolean bold, boolean italic, int size, Color color) {
        StringBuffer sb = new StringBuffer();
        if (bold)
            sb.append("1");
        else
            sb.append("0");
        if (italic)
            sb.append("1");
        else
            sb.append("0");
        sb.append(size);
        sb.append(color.getRGB());

        return sb.toString();
    }

    private Style getStyle(boolean bold, boolean italic, int size, Color color) {
        String styleName = getNameStyle(bold, italic, size, color);
        Style style = styledDocument.getStyle(styleName);
        if (style != null)
            return style;
        else {
            Style styleDefaut = styledDocument.getStyle(StyleContext.DEFAULT_STYLE);
            style = styledDocument.addStyle(styleName, styleDefaut);
            StyleConstants.setBold(style, bold);
            StyleConstants.setItalic(style, italic);
            StyleConstants.setFontSize(style, size);
            StyleConstants.setForeground(style, color);

            return style;
        }
    }

    private void setTabs(JTextPane textPane, int charactersPerTab) {
        FontMetrics fm = textPane.getFontMetrics(textPane.getFont());
        int charWidth = fm.charWidth('w');
        int tabWidth = charWidth * charactersPerTab;

        TabStop[] tabs = new TabStop[10];

        for (int j = 0; j < tabs.length; j++) {
            int tab = j + 1;
            tabs[j] = new TabStop(tab * tabWidth);
        }

        TabSet tabSet = new TabSet(tabs);
        SimpleAttributeSet attributes = new SimpleAttributeSet();
        StyleConstants.setTabSet(attributes, tabSet);
        int length = textPane.getDocument().getLength();
        textPane.getStyledDocument().setParagraphAttributes(0, length, attributes, false);
    }

    public String getText() {
        return scriptTextPane.getText();
    }

    public void setText(String str) {
        scriptTextPane.setText(str);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        scriptTextPane = new javax.swing.JTextPane();

        setName("Form"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        scriptTextPane.setName("scriptTextPane"); // NOI18N
        scriptTextPane.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                scriptTextPaneKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(scriptTextPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void scriptTextPaneKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_scriptTextPaneKeyTyped
        if(highlight && (evt.getKeyChar()==KeyEvent.VK_ENTER || evt.getKeyChar() == KeyEvent.VK_SPACE )){
            highlightThread = new SyntaxHighliter2(scriptTextPane);
            highlightThread.start();
        }
    }//GEN-LAST:event_scriptTextPaneKeyTyped

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane scriptTextPane;
    // End of variables declaration//GEN-END:variables
}
