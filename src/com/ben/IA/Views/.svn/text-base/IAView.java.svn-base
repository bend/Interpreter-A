/*
 * IAView.java
 */

package com.ben.IA.Views;

import com.ben.IA.App.IAApp;
import com.ben.IA.Views.utilities.Scripter;
import com.ben.IA.brain.Brain;
import com.ben.IA.brain.database.Notes;
import com.ben.IA.brain.database.WordSerialDatabase;
import java.util.EventObject;
import java.util.Observable;
import javax.swing.JTextPane;
import org.jdesktop.application.Action;
import org.jdesktop.application.FrameView;
import java.awt.event.KeyEvent;
import java.util.Observer;
import javax.swing.JDialog;
import javax.swing.JFrame;
import org.jdesktop.application.Application.ExitListener;
import java.awt.AWTException;
import java.awt.Image;
import java.awt.MenuItem;
import java.awt.PopupMenu;
import org.jdesktop.application.SingleFrameApplication;
import java.awt.SystemTray;
import java.awt.Toolkit;
import java.awt.TrayIcon;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

/**
 * The application's main frame.
 */
public class IAView extends FrameView implements Observer {
    private Brain brain;
    private static Image image = Toolkit.getDefaultToolkit().getImage("/Users/benoitdaccache/Documents/NetBeansProjects/IA/src/com/ben/IA/App/resources/tray.png");
    private static TrayIcon trayIcon = new TrayIcon(image, "Tester2");
    private PopupMenu popup;

    public IAView(SingleFrameApplication app) {
        super(app);
        initPlugins();
        this.getApplication().addExitListener(new ExitListener() {

            public boolean canExit(EventObject arg0) {
                runExit();
                return false;
            }

            public void willExit(EventObject arg0) {
            }
        });
        brain.addObserver(this);
        addTrayIcon();
        initComponents();
        new Scripter().setVisible(true);
    }

    private void runExit(){
        this.getApplication().hide(this);
        
    }
    private void initPlugins() {
        brain = new Brain();
        new WordSerialDatabase();
        new Notes();
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = IAApp.getApplication().getMainFrame();
            aboutBox = new IAAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        IAApp.getApplication().show(aboutBox);
    }

    private void append(JTextPane convTextPane, String text) {
        if(!text.equals("\n"))
            convTextPane.setText(convTextPane.getText()+ text);
    }

    private void addTrayIcon() {
        MenuItem showMenuItem;
        MenuItem exitMenuItem;
        if (SystemTray.isSupported()) {
            SystemTray tray = SystemTray.getSystemTray();
            trayIcon.setImageAutoSize(true);
            popup = new PopupMenu();
            showMenuItem = new MenuItem("Show");
            exitMenuItem = new MenuItem("Exit");
            showMenuItem.addActionListener(new ActionListener() {

                public void actionPerformed(ActionEvent e) {
                    showView();
                }
            });
            exitMenuItem.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    System.exit(0);
                }
            });
            popup.add(showMenuItem);
            popup.add(exitMenuItem);

            trayIcon.setPopupMenu(popup);
            try {
                tray.add(trayIcon);
            } catch (AWTException ex) {
                System.err.println("TrayIcon could not be added.");
            }
        }
    }

    private void showView(){
        this.getApplication().show(this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        convTextPane = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        askTextPane = new javax.swing.JTextPane();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();

        mainPanel.setName("mainPanel"); // NOI18N

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setContinuousLayout(true);
        jSplitPane1.setName("jSplitPane1"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        convTextPane.setEditable(false);
        convTextPane.setName("convTextPane"); // NOI18N
        jScrollPane1.setViewportView(convTextPane);

        jSplitPane1.setTopComponent(jScrollPane1);

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        askTextPane.setName("askTextPane"); // NOI18N
        askTextPane.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                askTextPaneKeyTyped(evt);
            }
        });
        jScrollPane2.setViewportView(askTextPane);

        jSplitPane1.setRightComponent(jScrollPane2);

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
        );

        menuBar.setName("menuBar"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.ben.IA.App.IAApp.class).getContext().getResourceMap(IAView.class);
        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(com.ben.IA.App.IAApp.class).getContext().getActionMap(IAView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setComponent(mainPanel);
        setMenuBar(menuBar);
    }// </editor-fold>//GEN-END:initComponents

    private void askTextPaneKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_askTextPaneKeyTyped
        if (evt.getKeyChar() == KeyEvent.VK_ENTER){
            append(convTextPane, askTextPane.getText());
            brain.performAsk(askTextPane.getText());
            askTextPane.setText("");
        }
}//GEN-LAST:event_askTextPaneKeyTyped

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextPane askTextPane;
    private javax.swing.JTextPane convTextPane;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    // End of variables declaration//GEN-END:variables

    private JDialog aboutBox;

    public void update(Observable o, Object arg) {
        if(arg!=null)
            append(convTextPane, (String) arg+"\n");
    }


}
